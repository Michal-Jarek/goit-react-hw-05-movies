{"version":3,"file":"static/js/859.47936c48.chunk.js","mappings":"qPACA,EAA2B,+B,SCoD3B,EA/CqB,SAAC,GAAgB,IAAdA,EAAa,EAAbA,OACtB,GAA0BC,EAAAA,EAAAA,UAAS,MAAnC,eAAOC,EAAP,KAAcC,EAAd,KAgBA,IAdAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAK,mCAAG,oGAEVC,QAAQC,IAAI,mBAFF,UAGaC,EAAAA,EAAAA,IAAWR,GAHxB,OAGJS,EAHI,OAIVN,EAASM,GAJC,gDAMVH,QAAQC,IAAR,MANU,yDAAH,qDAUX,OADAF,IACO,kBAAMF,EAAS,KAAf,CACR,GAAE,CAACH,IAEAE,EAAO,CACT,IACeQ,EAMXR,EANFS,YACAC,EAKEV,EALFU,MACAC,EAIEX,EAJFW,aACAC,EAGEZ,EAHFY,aACAC,EAEEb,EAFFa,SACAC,EACEd,EADFc,OAEF,OACE,+BACE,iBAAKC,UAAWC,EAAhB,WACE,0BACE,gBAAKR,IAAG,yCAAoCA,GAAOS,IAAKP,OAE1D,4BACE,kCAAQA,EAAR,aAAkBC,EAAaO,MAAM,EAAG,GAAxC,QACA,2CAAmBC,KAAKC,MAAqB,GAAfR,GAA9B,QACA,sCACA,0BAAOC,KACP,oCACA,0BAAOC,EAAOO,KAAI,SAAAC,GAAK,gBAAOA,EAAMC,KAAb,kBAKhC,CACD,OAAO,SAACC,EAAA,EAAD,GACR,E,iBClDD,EAAuB,+BCmCvB,EA7ByB,WAEvB,OAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KACA,GADA,MAC4B3B,EAAAA,EAAAA,UAAS,OAArC,eAAOD,EAAP,KAAe6B,EAAf,KAOA,IALAzB,EAAAA,EAAAA,YAAU,WACRyB,EAAUD,EAAaE,IAAI,MAE5B,GAAE,IACHxB,QAAQC,IAAIP,GACRA,EACF,OACE,iBAAKiB,UAAWC,EAAhB,WACE,SAAC,EAAD,CAAclB,OAAQA,KACtB,0BACE,2BACE,yBACE,SAAC,KAAD,CAAS+B,GAAE,kBAAa/B,GAAxB,qBAEF,yBACE,SAAC,KAAD,CAAS+B,GAAE,qBAAgB/B,GAA3B,6BAIN,SAAC,KAAD,MAGP,C,sKChCKgC,EAAS,4CAGTC,EAAWC,EAAAA,EAAAA,OAAa,CAC5BC,QAAS,gCACTC,QAAS,MAGLC,EAAa,mCAAG,oGACGJ,EAASH,IAAT,UARH,sBAQG,OAAgCE,IADnC,cACdvB,EADc,yBAEbA,EAAS6B,KAAKC,SAFD,2CAAH,qDAKb/B,EAAU,mCAAG,WAAMgC,GAAN,uFACMP,EAASH,IAAT,gBAAsBU,GAAtB,OAA2BR,IADjC,cACXvB,EADW,yBAEVA,EAAS6B,MAFC,2CAAH,sDAKVG,EAAY,mCAAG,WAAMD,GAAN,uFACIP,EAASH,IAAT,gBAAsBU,EAAtB,mBAAmCR,IADvC,UAEkB,KAD/BvB,EADa,QAEN6B,KAAKC,QAAQG,OAFP,yCAE4B,MAF5B,gCAGZjC,EAAS6B,KAAKC,SAHF,2CAAH,sDAKZI,EAAU,mCAAG,WAAMH,GAAN,uFACMP,EAASH,IAAT,gBAAsBU,EAAtB,mBAAmCR,IADzC,UAEiB,KAD5BvB,EADW,QAEJ6B,KAAKM,KAAKF,OAFN,yCAE2B,MAF3B,gCAGVjC,EAAS6B,KAAKM,MAHJ,2CAAH,qD","sources":["webpack://goit-react-hw-05-movies/./src/components/MovieDetails/MovieDetails.module.scss?0a3a","components/MovieDetails/MovieDetails.jsx","webpack://goit-react-hw-05-movies/./src/pages/MoviesPage/MovieDetailsPage/MovieDetailsPage.module.scss?d49b","pages/MoviesPage/MovieDetailsPage/MovieDetailsPage.jsx","utils/api/fetchMovie.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"template\":\"MovieDetails_template__FWs7W\"};","import { Loader } from 'components/Loader/Loader';\nimport { useState, useEffect } from 'react';\n\nimport { fetchMovie } from '../../utils/api/fetchMovie';\nimport scss from './MovieDetails.module.scss';\n\nconst MovieDetails = ({ filmId }) => {\n  const [movie, setMovie] = useState(null);\n\n  useEffect(() => {\n    const fetch = async () => {\n      try {\n        console.log('w fetch reviews');\n        const response = await fetchMovie(filmId);\n        setMovie(response);\n      } catch (e) {\n        console.log(e);\n      }\n    };\n    fetch();\n    return () => setMovie(null);\n  }, [filmId]);\n\n  if (movie) {\n    const {\n      poster_path: src,\n      title,\n      release_date,\n      vote_average,\n      overview,\n      genres,\n    } = movie;\n    return (\n      <>\n        <div className={scss.template}>\n          <div>\n            <img src={`https://image.tmdb.org/t/p/w500${src}`} alt={title} />\n          </div>\n          <div>\n            <h1>{`${title} (${release_date.slice(0, 4)})`}</h1>\n            <span>User Score: {Math.round(vote_average * 10)}%</span>\n            <h2>Overview</h2>\n            <span>{overview}</span>\n            <h3>Genres</h3>\n            <span>{genres.map(genre => `${genre.name}, `)}</span>\n          </div>\n        </div>\n      </>\n    );\n  }\n  return <Loader />;\n};\n\nexport default MovieDetails;\n","// extracted by mini-css-extract-plugin\nexport default {\"card\":\"MovieDetailsPage_card__ESakD\"};","import MovieDetails from 'components/MovieDetails/MovieDetails';\nimport { useState } from 'react';\nimport { useEffect } from 'react';\nimport { NavLink, Outlet, useSearchParams } from 'react-router-dom';\n\nimport scss from './MovieDetailsPage.module.scss';\n\nconst MovieDetailsPage = () => {\n  // eslint-disable-next-line\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [filmId, setFilmId] = useState(null);\n\n  useEffect(() => {\n    setFilmId(searchParams.get('id'));\n    // eslint-disable-next-line\n  }, []);\n  console.log(filmId);\n  if (filmId)\n    return (\n      <div className={scss.card}>\n        <MovieDetails filmId={filmId} />\n        <div>\n          <ul>\n            <li>\n              <NavLink to={`cast?id=${filmId}`}>Cast</NavLink>\n            </li>\n            <li>\n              <NavLink to={`reviews?id=${filmId}`}>Reviews</NavLink>\n            </li>\n          </ul>\n        </div>\n        <Outlet />\n      </div>\n    );\n};\n\nexport default MovieDetailsPage;\n","import axios from 'axios';\n\nconst apiKey = '?api_key=b6baed1eb57186fb03779557a2765daa';\nconst trendingToday = 'trending/movie/day';\n\nconst instance = axios.create({\n  baseURL: 'https://api.themoviedb.org/3/',\n  timeout: 3000,\n});\n\nconst fetchTrending = async () => {\n  const response = await instance.get(`${trendingToday}${apiKey}`);\n  return response.data.results;\n};\n\nconst fetchMovie = async id => {\n  const response = await instance.get(`movie/${id}${apiKey}`);\n  return response.data;\n};\n\nconst fetchReviews = async id => {\n  const response = await instance.get(`movie/${id}/reviews${apiKey}`);\n  if (response.data.results.length === 0) return null;\n  return response.data.results;\n};\nconst fetchCasts = async id => {\n  const response = await instance.get(`movie/${id}/credits${apiKey}`);\n  if (response.data.cast.length === 0) return null;\n  return response.data.cast;\n};\n\nexport { fetchTrending, fetchMovie, fetchReviews, fetchCasts };\n"],"names":["filmId","useState","movie","setMovie","useEffect","fetch","console","log","fetchMovie","response","src","poster_path","title","release_date","vote_average","overview","genres","className","scss","alt","slice","Math","round","map","genre","name","Loader","useSearchParams","searchParams","setFilmId","get","to","apiKey","instance","axios","baseURL","timeout","fetchTrending","data","results","id","fetchReviews","length","fetchCasts","cast"],"sourceRoot":""}
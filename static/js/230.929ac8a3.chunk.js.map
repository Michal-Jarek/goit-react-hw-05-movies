{"version":3,"file":"static/js/230.929ac8a3.chunk.js","mappings":"4OAGMA,EAAY,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,MAAOC,EAAiB,EAAjBA,WAC1B,GAAqB,IAAjBD,EAAME,OAEV,OACE,iCACE,0CACA,wBACGF,EAAMG,KAAI,gBAAGC,EAAH,EAAGA,eAAgBC,EAAnB,EAAmBA,GAAnB,OACT,yBACE,SAAC,KAAD,CAASC,GAAE,mBAAcD,GAAME,MAAON,EAAtC,SACGG,KAFIC,EADA,QAUlB,EClBYG,EAAY,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAC1B,OACE,mBAAQC,UAAU,YAAlB,UACE,kBAAMA,UAAU,aAAaD,SAAUA,EAAvC,WACE,kBACEE,KAAK,QACLD,UAAU,mBACVE,KAAK,OACLC,aAAa,MACbC,WAAS,EACTC,YAAY,kBAEd,mBAAQH,KAAK,SAASF,UAAU,oBAAhC,UACE,iBAAMA,UAAU,0BAAhB,0BAKT,E,0BCqBD,EAlCmB,WACjB,OAA0BM,EAAAA,EAAAA,IAAgB,IAA1C,eAAOC,EAAP,KAAcC,EAAd,KACA,GAAoCC,EAAAA,EAAAA,UAAS,IAA7C,eAAOC,EAAP,KAAmBC,EAAnB,KACMC,GAAWC,EAAAA,EAAAA,OAEjBC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAc,mCAAG,8GAEIC,EAAAA,EAAAA,IAAkBT,EAAMU,IAAI,UAFhC,OAEbC,EAFa,OAGnBP,EAAcO,GAHK,gDAKnBC,QAAQC,IAAR,MALmB,yDAAH,qDAQpBL,GACD,GAAE,CAACR,IASJ,OACE,4BACE,SAACT,EAAD,CAAWC,SATE,SAAAsB,GACfA,EAAEC,iBACFd,EAAS,CAAED,MAAOc,EAAEE,cAAcC,SAASC,MAAMC,QACjDL,EAAEM,OAAOC,OACV,IAM2B,OAAvBrB,EAAMU,IAAI,WACT,SAAC5B,EAAD,CAAWC,MAAOoB,EAAYnB,WAAY,CAAEsC,KAAMjB,OAIzD,C,8LCrCKkB,EAAS,4CAGTC,EAAWC,EAAAA,EAAAA,OAAa,CAC5BC,QAAS,gCACTC,QAAS,MAGLC,EAAa,mCAAG,oGACGJ,EAASd,IAAT,UARH,sBAQG,OAAgCa,IADnC,cACdZ,EADc,yBAEbA,EAASkB,KAAKC,SAFD,2CAAH,qDAKbC,EAAU,mCAAG,WAAM3C,GAAN,uFACMoC,EAASd,IAAT,gBAAsBtB,GAAtB,OAA2BmC,IADjC,cACXZ,EADW,yBAEVA,EAASkB,MAFC,2CAAH,sDAKVG,EAAY,mCAAG,WAAM5C,GAAN,uFACIoC,EAASd,IAAT,gBAAsBtB,EAAtB,mBAAmCmC,IADvC,UAEkB,KAD/BZ,EADa,QAENkB,KAAKC,QAAQ7C,OAFP,yCAE4B,MAF5B,gCAGZ0B,EAASkB,KAAKC,SAHF,2CAAH,sDAKZG,EAAU,mCAAG,WAAM7C,GAAN,uFACMoC,EAASd,IAAT,gBAAsBtB,EAAtB,mBAAmCmC,IADzC,UAEiB,KAD5BZ,EADW,QAEJkB,KAAKK,KAAKjD,OAFN,yCAE2B,MAF3B,gCAGV0B,EAASkB,KAAKK,MAHJ,2CAAH,sDAMVzB,EAAiB,mCAAG,WAAMT,GAAN,uFACDwB,EAASd,IAAT,sBACNa,EADM,kBACUvB,EADV,8CADC,UAIM,KAHxBW,EADkB,QAIXkB,KAAKC,QAJM,yCAIgB,MAJhB,gCAKjBnB,EAASkB,KAAKC,SALG,2CAAH,qD","sources":["components/MovieList/MovieList.jsx","components/SearchBox/SearchBox.jsx","pages/MoviesPage/MoviesPage.jsx","utils/api/fetchMovie.js"],"sourcesContent":["import { NavLink } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nconst MovieList = ({ array, movieState }) => {\n  if (array.length === 0) return;\n\n  return (\n    <>\n      <h2>Movie List: </h2>\n      <ul>\n        {array.map(({ original_title, id }) => (\n          <li key={id}>\n            <NavLink to={`movie?id=${id}`} state={movieState}>\n              {original_title}\n            </NavLink>\n          </li>\n        ))}\n      </ul>\n    </>\n  );\n};\n\nMovieList.propTypes = {\n  array: PropTypes.array,\n  movieState: PropTypes.object,\n};\n\nexport { MovieList };\n","import PropTypes from 'prop-types';\n\nexport const SearchBox = ({ onSubmit }) => {\n  return (\n    <header className=\"Searchbar\">\n      <form className=\"SearchForm\" onSubmit={onSubmit}>\n        <input\n          name=\"Title\"\n          className=\"SearchForm-input\"\n          type=\"text\"\n          autoComplete=\"off\"\n          autoFocus\n          placeholder=\"Movie title?\"\n        />\n        <button type=\"submit\" className=\"SearchForm-button\">\n          <span className=\"SearchForm-button-label\">Search</span>\n        </button>\n      </form>\n    </header>\n  );\n};\n\nSearchBox.propTypes = {\n  onSubmit: PropTypes.func,\n};\n","import { MovieList } from 'components/MovieList/MovieList';\nimport { SearchBox } from 'components/SearchBox/SearchBox';\nimport { useState, useEffect } from 'react';\n\nimport { useLocation, useSearchParams } from 'react-router-dom';\nimport { fetchMovieByTitle } from 'utils/api/fetchMovie';\n\nconst MoviesPage = () => {\n  const [title, setTitle] = useSearchParams('');\n  const [movieArray, setMovieArray] = useState([]);\n  const location = useLocation();\n\n  useEffect(() => {\n    const fetchMovieList = async () => {\n      try {\n        const response = await fetchMovieByTitle(title.get('title'));\n        setMovieArray(response);\n      } catch (e) {\n        console.log(e);\n      }\n    };\n    fetchMovieList();\n  }, [title]);\n\n  const onSubmit = e => {\n    e.preventDefault();\n    setTitle({ title: e.currentTarget.elements.Title.value });\n    e.target.reset();\n  };\n\n\n  return (\n    <div>\n      <SearchBox onSubmit={onSubmit} />\n      {title.get('title') !== null && (\n        <MovieList array={movieArray} movieState={{ from: location }} />\n      )}\n    </div>\n  );\n};\n\nexport default MoviesPage;\n","import axios from 'axios';\n\nconst apiKey = '?api_key=b6baed1eb57186fb03779557a2765daa';\nconst trendingToday = 'trending/movie/day';\n\nconst instance = axios.create({\n  baseURL: 'https://api.themoviedb.org/3/',\n  timeout: 3000,\n});\n\nconst fetchTrending = async () => {\n  const response = await instance.get(`${trendingToday}${apiKey}`);\n  return response.data.results;\n};\n\nconst fetchMovie = async id => {\n  const response = await instance.get(`movie/${id}${apiKey}`);\n  return response.data;\n};\n\nconst fetchReviews = async id => {\n  const response = await instance.get(`movie/${id}/reviews${apiKey}`);\n  if (response.data.results.length === 0) return null;\n  return response.data.results;\n};\nconst fetchCasts = async id => {\n  const response = await instance.get(`movie/${id}/credits${apiKey}`);\n  if (response.data.cast.length === 0) return null;\n  return response.data.cast;\n};\n\nconst fetchMovieByTitle = async title => {\n  const response = await instance.get(\n    `search/movie${apiKey}&query=${title}&language=en-US&page=1&include_adult=true`\n  );\n  if (response.data.results === 0) return null;\n  return response.data.results;\n};\n\nexport {\n  fetchTrending,\n  fetchMovie,\n  fetchReviews,\n  fetchCasts,\n  fetchMovieByTitle,\n};\n"],"names":["MovieList","array","movieState","length","map","original_title","id","to","state","SearchBox","onSubmit","className","name","type","autoComplete","autoFocus","placeholder","useSearchParams","title","setTitle","useState","movieArray","setMovieArray","location","useLocation","useEffect","fetchMovieList","fetchMovieByTitle","get","response","console","log","e","preventDefault","currentTarget","elements","Title","value","target","reset","from","apiKey","instance","axios","baseURL","timeout","fetchTrending","data","results","fetchMovie","fetchReviews","fetchCasts","cast"],"sourceRoot":""}